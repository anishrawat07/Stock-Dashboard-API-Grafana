from google.oauth2.service_account import Credentials
import gspread
import requests
import time
from datetime import datetime

# Google Service Account JSON Credentials
json_creds = {
    "type": "service_account",
    "project_id": "stock-price-******",
    "private_key_id": "**************************************************",
    "private_key": "-----BEGIN PRIVATE KEY-----###################################################################################
     #############################################################################################################################
    "client_email": "stock-pricing@stock-price-*******.iam.gserviceaccount.com",
    "client_id": "****************",
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/stock-pricing@stock-price-441512.iam.gserviceaccount.com"
}

# Initialize Google Sheets API
scope = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

creds = Credentials.from_service_account_info(json_creds, scopes=scope)
client = gspread.authorize(creds)
sheet = client.open("Stock_Prices").sheet1

# List of symbols to track
symbols = [
    "TCS", "INFY", "AAPL", "MSFT", "GOOGL", "AMZN"
]

symbol_names = {
    "TCS": "Tata Consultancy Services Ltd.",
    "INFY": "Infosys Ltd",
    "GOOGL": "Google Ltd.",
    "AAPL": "Apple Inc.",
    "MSFT": "Microsoft Corporation",
    "AMZN": "Amazon.com, Inc."
        
}


# Function to fetch stock data from FinnHub API
def fetch_stock_data(symbol):
    api_key = "*************************************************"
    url = f"https://finnhub.io/api/v1/quote?symbol={symbol}&token={api_key}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return {
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "price": data.get("c"),
            "open": data.get("o"),
            "close": data.get("pc"),
            "high": data.get("h"),
            "low": data.get("l"),
        }
    else:
        print(f"Error fetching data for {symbol}: {response.text}")
        return None

# Update Google Sheet with stock data
def update_google_sheet():
    for index, symbol in enumerate(symbols, start=2):  # Start from row 2
        stock_data = fetch_stock_data(symbol)
        if stock_data:
            row = [
                stock_data["timestamp"],
                symbol_names[symbol],
                stock_data["price"],
                stock_data["open"],
                stock_data["close"],
                stock_data["high"],
                stock_data["low"]
            ]
            sheet.insert_row(row, index)
            print(f"Updated row for {symbol}: {row}")
        time.sleep(1)  # Rate limit

while True:
    update_google_sheet()
